在软件开发中，我们经常想要对一类对象添加不同的功能，例如要给手机添加贴膜，手机挂件，手机外壳等，如果此时利用继承来实现的话，就需要定义无数的类，如StickerPhone（贴膜是手机类）、AccessoriesPhone（挂件手机类）等，这样就会导致 ”子类爆炸“问题，为了解决这个问题，我们可以使用装饰者模式来动态地给一个对象添加额外的职责。

定义:装饰者模式以对客户透明的方式动态地给一个对象附加上更多的责任，装饰者模式相比生成子类可以更灵活地增加功能。


在装饰者模式中各个角色有：

抽象构件（Phone）角色：给出一个抽象接口，以规范准备接受附加责任的对象。
具体构件（AppPhone）角色：定义一个将要接收附加责任的类。
装饰（Dicorator）角色：持有一个构件（Component）对象的实例，并定义一个与抽象构件接口一致的接口。
具体装饰（Sticker和Accessories）角色：负责给构件对象 ”贴上“附加的责任。